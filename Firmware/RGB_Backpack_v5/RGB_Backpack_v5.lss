
RGB_Backpack_v5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c8  00800140  00800140  00000680  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000017e  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a4  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e0  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000060f  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fc  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001bc  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	14 e0       	ldi	r17, 0x04	; 4
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 02 	call	0x52a	; 0x52a <main>
  9e:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <parse_frame>:

	PORTD = 0; //Turn off display
}

void parse_frame(char * postBuffer)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	bc 01       	movw	r22, r24
  ac:	4f e3       	ldi	r20, 0x3F	; 63
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	cf e3       	ldi	r28, 0x3F	; 63
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	de 01       	movw	r26, r28
  b6:	a4 1b       	sub	r26, r20
  b8:	b5 0b       	sbc	r27, r21
    uint8_t color_value;
    
    for(int LED = 0 ; LED < 64 ; LED++)
    {
        color_value = postBuffer[63-LED];
  ba:	fb 01       	movw	r30, r22
  bc:	e4 0f       	add	r30, r20
  be:	f5 1f       	adc	r31, r21
  c0:	20 81       	ld	r18, Z
        red_frame[LED] = (color_value & 0xE0) >> 5;	//(temp & 0b11100000) >> 5; Highes 3 bits represent the Red value for the current LED
  c2:	82 2f       	mov	r24, r18
  c4:	82 95       	swap	r24
  c6:	86 95       	lsr	r24
  c8:	87 70       	andi	r24, 0x07	; 7
  ca:	fd 01       	movw	r30, r26
  cc:	e9 5b       	subi	r30, 0xB9	; 185
  ce:	fc 4f       	sbci	r31, 0xFC	; 252
  d0:	80 83       	st	Z, r24
        green_frame[LED] = (color_value & 0x1C) >> 2; 	//(temp & 0b00011100) >> 2; Next 3 bits represent the Green value for the current LED
  d2:	82 2f       	mov	r24, r18
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	8c 71       	andi	r24, 0x1C	; 28
  d8:	90 70       	andi	r25, 0x00	; 0
  da:	95 95       	asr	r25
  dc:	87 95       	ror	r24
  de:	95 95       	asr	r25
  e0:	87 95       	ror	r24
  e2:	fd 01       	movw	r30, r26
  e4:	e9 53       	subi	r30, 0x39	; 57
  e6:	fc 4f       	sbci	r31, 0xFC	; 252
  e8:	80 83       	st	Z, r24
        blue_frame[LED] = (color_value & 0x03); 		//(temp & 0b00000011); Final 2 bits represent the Blue value for the current LED
  ea:	23 70       	andi	r18, 0x03	; 3
  ec:	a9 57       	subi	r26, 0x79	; 121
  ee:	bc 4f       	sbci	r27, 0xFC	; 252
  f0:	2c 93       	st	X, r18
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	50 40       	sbci	r21, 0x00	; 0

void parse_frame(char * postBuffer)
{
    uint8_t color_value;
    
    for(int LED = 0 ; LED < 64 ; LED++)
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	4f 3f       	cpi	r20, 0xFF	; 255
  fa:	58 07       	cpc	r21, r24
  fc:	d9 f6       	brne	.-74     	; 0xb4 <parse_frame+0xe>
        color_value = postBuffer[63-LED];
        red_frame[LED] = (color_value & 0xE0) >> 5;	//(temp & 0b11100000) >> 5; Highes 3 bits represent the Red value for the current LED
        green_frame[LED] = (color_value & 0x1C) >> 2; 	//(temp & 0b00011100) >> 2; Next 3 bits represent the Green value for the current LED
        blue_frame[LED] = (color_value & 0x03); 		//(temp & 0b00000011); Final 2 bits represent the Blue value for the current LED
    }
    new_frame = 0; //Reset new frame flag
  fe:	10 92 07 04 	sts	0x0407, r1
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <shift_out_line>:
{	
	for(char row = 0 ; row < 8; row++)shift_out_line(row);	//Send all 8 rows of colors to the Matrix
}

void shift_out_line(volatile uint8_t row_num)
{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	0f 92       	push	r0
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
	cbi(PORTC, LATCH);	//Disable the shift registers
 114:	42 98       	cbi	0x08, 2	; 8

	//Send Red Values
	for(uint8_t LED = row_num*8 ; LED < (row_num*8)+8 ; LED++) //Step through bits
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	22 0f       	add	r18, r18
 11a:	22 0f       	add	r18, r18
 11c:	22 0f       	add	r18, r18
 11e:	0d c0       	rjmp	.+26     	; 0x13a <shift_out_line+0x32>
	{
		cbi(PORTC, CLK);	//Lower the shift register clock so we can configure the data
 120:	40 98       	cbi	0x08, 0	; 8
		
		//Compare the current color value to timer_clicks to Pulse Width Modulate the LED to create the designated brightness
		if(timer_clicks < red_frame[LED])
 122:	90 91 42 01 	lds	r25, 0x0142
 126:	e9 5b       	subi	r30, 0xB9	; 185
 128:	fc 4f       	sbci	r31, 0xFC	; 252
 12a:	80 81       	ld	r24, Z
 12c:	98 17       	cp	r25, r24
 12e:	10 f4       	brcc	.+4      	; 0x134 <shift_out_line+0x2c>
			sbi(PORTC, DATA);
 130:	41 9a       	sbi	0x08, 1	; 8
 132:	01 c0       	rjmp	.+2      	; 0x136 <shift_out_line+0x2e>
		else
			cbi(PORTC, DATA);
 134:	41 98       	cbi	0x08, 1	; 8

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
 136:	40 9a       	sbi	0x08, 0	; 8
void shift_out_line(volatile uint8_t row_num)
{
	cbi(PORTC, LATCH);	//Disable the shift registers

	//Send Red Values
	for(uint8_t LED = row_num*8 ; LED < (row_num*8)+8 ; LED++) //Step through bits
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	e2 2f       	mov	r30, r18
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e1 f7       	brne	.-8      	; 0x146 <shift_out_line+0x3e>
 14e:	e8 17       	cp	r30, r24
 150:	f9 07       	cpc	r31, r25
 152:	34 f3       	brlt	.-52     	; 0x120 <shift_out_line+0x18>
			cbi(PORTC, DATA);

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
	}
	//Send Blue Values
	for(uint8_t LED = row_num*8 ; LED < (row_num*8)+8 ; LED++) //Step through bits
 154:	29 81       	ldd	r18, Y+1	; 0x01
 156:	22 0f       	add	r18, r18
 158:	22 0f       	add	r18, r18
 15a:	22 0f       	add	r18, r18
 15c:	0d c0       	rjmp	.+26     	; 0x178 <shift_out_line+0x70>
	{
		cbi(PORTC, CLK);	//Lower the shift register clock so we can configure the data
 15e:	40 98       	cbi	0x08, 0	; 8
	
		//Compare the current color value to timer_clicks to Pulse Width Modulate the LED to create the designated brightness
		if(timer_clicks < blue_frame[LED])
 160:	90 91 42 01 	lds	r25, 0x0142
 164:	e9 57       	subi	r30, 0x79	; 121
 166:	fc 4f       	sbci	r31, 0xFC	; 252
 168:	80 81       	ld	r24, Z
 16a:	98 17       	cp	r25, r24
 16c:	10 f4       	brcc	.+4      	; 0x172 <shift_out_line+0x6a>
			sbi(PORTC, DATA);
 16e:	41 9a       	sbi	0x08, 1	; 8
 170:	01 c0       	rjmp	.+2      	; 0x174 <shift_out_line+0x6c>
		else
			cbi(PORTC, DATA);
 172:	41 98       	cbi	0x08, 1	; 8

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
 174:	40 9a       	sbi	0x08, 0	; 8
			cbi(PORTC, DATA);

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
	}
	//Send Blue Values
	for(uint8_t LED = row_num*8 ; LED < (row_num*8)+8 ; LED++) //Step through bits
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	e2 2f       	mov	r30, r18
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	53 e0       	ldi	r21, 0x03	; 3
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	5a 95       	dec	r21
 18a:	e1 f7       	brne	.-8      	; 0x184 <shift_out_line+0x7c>
 18c:	e8 17       	cp	r30, r24
 18e:	f9 07       	cpc	r31, r25
 190:	34 f3       	brlt	.-52     	; 0x15e <shift_out_line+0x56>
			cbi(PORTC, DATA);

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
	}
	//Send Green Values
	for(uint8_t i = row_num*8 ; i < (row_num*8)+8 ; i++) //Step through bits
 192:	29 81       	ldd	r18, Y+1	; 0x01
 194:	22 0f       	add	r18, r18
 196:	22 0f       	add	r18, r18
 198:	22 0f       	add	r18, r18
 19a:	0d c0       	rjmp	.+26     	; 0x1b6 <shift_out_line+0xae>
	{
		cbi(PORTC, CLK);	//Lower the shift register clock so we can configure the data
 19c:	40 98       	cbi	0x08, 0	; 8
	
		//Compare the current color value to timer_clicks to Pulse Width Modulate the LED to create the designated brightness
		if(timer_clicks < green_frame[i])
 19e:	90 91 42 01 	lds	r25, 0x0142
 1a2:	e9 53       	subi	r30, 0x39	; 57
 1a4:	fc 4f       	sbci	r31, 0xFC	; 252
 1a6:	80 81       	ld	r24, Z
 1a8:	98 17       	cp	r25, r24
 1aa:	10 f4       	brcc	.+4      	; 0x1b0 <shift_out_line+0xa8>
			sbi(PORTC, DATA);
 1ac:	41 9a       	sbi	0x08, 1	; 8
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <shift_out_line+0xaa>
		else
			cbi(PORTC, DATA);
 1b0:	41 98       	cbi	0x08, 1	; 8

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
 1b2:	40 9a       	sbi	0x08, 0	; 8
			cbi(PORTC, DATA);

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
	}
	//Send Green Values
	for(uint8_t i = row_num*8 ; i < (row_num*8)+8 ; i++) //Step through bits
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	e2 2f       	mov	r30, r18
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	43 e0       	ldi	r20, 0x03	; 3
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	4a 95       	dec	r20
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <shift_out_line+0xba>
 1ca:	e8 17       	cp	r30, r24
 1cc:	f9 07       	cpc	r31, r25
 1ce:	34 f3       	brlt	.-52     	; 0x19c <shift_out_line+0x94>
			cbi(PORTC, DATA);

		sbi(PORTC, CLK);	//Raise the shift register clock to lock in the data
	}

	sbi(PORTC, EN);		//Disable the Shift Register Outputs
 1d0:	44 9a       	sbi	0x08, 4	; 8
	sbi(PORTC, LATCH);	//Put the new data onto the outputs of the shift register
 1d2:	42 9a       	sbi	0x08, 2	; 8

	PORTD = (1<<row_num); //Sink current through row (Turns colors 'ON' for the given row. Keep in mind that we can only display to 1 row at a time.)
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <shift_out_line+0xd8>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	2a 95       	dec	r18
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <shift_out_line+0xd4>
 1e4:	8b b9       	out	0x0b, r24	; 11

	cbi(PORTC, EN);		//Enable the Shift Register Outputs
 1e6:	44 98       	cbi	0x08, 4	; 8
}
 1e8:	0f 90       	pop	r0
 1ea:	cf 91       	pop	r28
 1ec:	df 91       	pop	r29
 1ee:	08 95       	ret

000001f0 <post_frames>:
    }
    new_frame = 0; //Reset new frame flag
}

void post_frames(void)
{	
 1f0:	1f 93       	push	r17
 1f2:	10 e0       	ldi	r17, 0x00	; 0
	for(char row = 0 ; row < 8; row++)shift_out_line(row);	//Send all 8 rows of colors to the Matrix
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 84 00 	call	0x108	; 0x108 <shift_out_line>
 1fa:	1f 5f       	subi	r17, 0xFF	; 255
 1fc:	18 30       	cpi	r17, 0x08	; 8
 1fe:	d1 f7       	brne	.-12     	; 0x1f4 <post_frames+0x4>
}
 200:	1f 91       	pop	r17
 202:	08 95       	ret

00000204 <splash_screen>:
	}
		
}

void splash_screen(void)
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
	uint16_t i;
	cli();
 208:	f8 94       	cli
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
	//Fill red
	for(i = 0 ; i < 64 ; i++)
	{
		red_frame[i] = 7;
 20e:	27 e0       	ldi	r18, 0x07	; 7
 210:	fc 01       	movw	r30, r24
 212:	e9 5b       	subi	r30, 0xB9	; 185
 214:	fc 4f       	sbci	r31, 0xFC	; 252
 216:	20 83       	st	Z, r18
		green_frame[i] = 0;
 218:	fc 01       	movw	r30, r24
 21a:	e9 53       	subi	r30, 0x39	; 57
 21c:	fc 4f       	sbci	r31, 0xFC	; 252
 21e:	10 82       	st	Z, r1
		blue_frame[i] = 0;
 220:	fc 01       	movw	r30, r24
 222:	e9 57       	subi	r30, 0x79	; 121
 224:	fc 4f       	sbci	r31, 0xFC	; 252
 226:	10 82       	st	Z, r1
void splash_screen(void)
{
	uint16_t i;
	cli();
	//Fill red
	for(i = 0 ; i < 64 ; i++)
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	80 34       	cpi	r24, 0x40	; 64
 22c:	91 05       	cpc	r25, r1
 22e:	81 f7       	brne	.-32     	; 0x210 <splash_screen+0xc>
 230:	c0 e0       	ldi	r28, 0x00	; 0
 232:	d0 e0       	ldi	r29, 0x00	; 0
		green_frame[i] = 0;
		blue_frame[i] = 0;
	}

	for(i = 0 ; i < 1000 ; i++)
		post_frames();
 234:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <post_frames>
		red_frame[i] = 7;
		green_frame[i] = 0;
		blue_frame[i] = 0;
	}

	for(i = 0 ; i < 1000 ; i++)
 238:	21 96       	adiw	r28, 0x01	; 1
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	c8 3e       	cpi	r28, 0xE8	; 232
 23e:	d8 07       	cpc	r29, r24
 240:	c9 f7       	brne	.-14     	; 0x234 <splash_screen+0x30>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0

	//Fill green
	for(i = 0 ; i < 64 ; i++)
	{
		red_frame[i] = 0;
		green_frame[i] = 7;
 246:	27 e0       	ldi	r18, 0x07	; 7
		post_frames();

	//Fill green
	for(i = 0 ; i < 64 ; i++)
	{
		red_frame[i] = 0;
 248:	fc 01       	movw	r30, r24
 24a:	e9 5b       	subi	r30, 0xB9	; 185
 24c:	fc 4f       	sbci	r31, 0xFC	; 252
 24e:	10 82       	st	Z, r1
		green_frame[i] = 7;
 250:	fc 01       	movw	r30, r24
 252:	e9 53       	subi	r30, 0x39	; 57
 254:	fc 4f       	sbci	r31, 0xFC	; 252
 256:	20 83       	st	Z, r18
		blue_frame[i] = 0;
 258:	fc 01       	movw	r30, r24
 25a:	e9 57       	subi	r30, 0x79	; 121
 25c:	fc 4f       	sbci	r31, 0xFC	; 252
 25e:	10 82       	st	Z, r1

	for(i = 0 ; i < 1000 ; i++)
		post_frames();

	//Fill green
	for(i = 0 ; i < 64 ; i++)
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	80 34       	cpi	r24, 0x40	; 64
 264:	91 05       	cpc	r25, r1
 266:	81 f7       	brne	.-32     	; 0x248 <splash_screen+0x44>
 268:	c0 e0       	ldi	r28, 0x00	; 0
 26a:	d0 e0       	ldi	r29, 0x00	; 0
		green_frame[i] = 7;
		blue_frame[i] = 0;
	}

	for(i = 0 ; i < 1000 ; i++)
		post_frames();
 26c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <post_frames>
		red_frame[i] = 0;
		green_frame[i] = 7;
		blue_frame[i] = 0;
	}

	for(i = 0 ; i < 1000 ; i++)
 270:	21 96       	adiw	r28, 0x01	; 1
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	c8 3e       	cpi	r28, 0xE8	; 232
 276:	d8 07       	cpc	r29, r24
 278:	c9 f7       	brne	.-14     	; 0x26c <splash_screen+0x68>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
	//Fill blue
	for(i = 0 ; i < 64 ; i++)
	{
		red_frame[i] = 0;
		green_frame[i] = 0;
		blue_frame[i] = 7;
 27e:	27 e0       	ldi	r18, 0x07	; 7
		post_frames();

	//Fill blue
	for(i = 0 ; i < 64 ; i++)
	{
		red_frame[i] = 0;
 280:	fc 01       	movw	r30, r24
 282:	e9 5b       	subi	r30, 0xB9	; 185
 284:	fc 4f       	sbci	r31, 0xFC	; 252
 286:	10 82       	st	Z, r1
		green_frame[i] = 0;
 288:	fc 01       	movw	r30, r24
 28a:	e9 53       	subi	r30, 0x39	; 57
 28c:	fc 4f       	sbci	r31, 0xFC	; 252
 28e:	10 82       	st	Z, r1
		blue_frame[i] = 7;
 290:	fc 01       	movw	r30, r24
 292:	e9 57       	subi	r30, 0x79	; 121
 294:	fc 4f       	sbci	r31, 0xFC	; 252
 296:	20 83       	st	Z, r18

	for(i = 0 ; i < 1000 ; i++)
		post_frames();

	//Fill blue
	for(i = 0 ; i < 64 ; i++)
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	80 34       	cpi	r24, 0x40	; 64
 29c:	91 05       	cpc	r25, r1
 29e:	81 f7       	brne	.-32     	; 0x280 <splash_screen+0x7c>
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
		green_frame[i] = 0;
		blue_frame[i] = 7;
	}

	for(i = 0 ; i < 1000 ; i++)
		 post_frames(); 		 
 2a4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <post_frames>
		red_frame[i] = 0;
		green_frame[i] = 0;
		blue_frame[i] = 7;
	}

	for(i = 0 ; i < 1000 ; i++)
 2a8:	21 96       	adiw	r28, 0x01	; 1
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	c8 3e       	cpi	r28, 0xE8	; 232
 2ae:	d8 07       	cpc	r29, r24
 2b0:	c9 f7       	brne	.-14     	; 0x2a4 <splash_screen+0xa0>
		 post_frames(); 		 

	PORTD = 0; //Turn off display
 2b2:	1b b8       	out	0x0b, r1	; 11
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <delay_us>:
	cbi(PORTC, EN);		//Enable the Shift Register Outputs
}

void delay_us(uint8_t x)
{
	TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer2
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	95 bb       	out	0x15, r25	; 21
	TCNT0 = 256 - x; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
 2be:	98 2f       	mov	r25, r24
 2c0:	91 95       	neg	r25
 2c2:	96 bd       	out	0x26, r25	; 38
	while( (TIFR0 & (1<<TOV0)) == 0);
 2c4:	a8 9b       	sbis	0x15, 0	; 21
 2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <delay_us+0xa>

	//Double the delay because we are using 16MHz and 8 prescalar

	TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer2
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 256 - x; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
 2cc:	96 bd       	out	0x26, r25	; 38
	while( (TIFR0 & (1<<TOV0)) == 0);
 2ce:	a8 9b       	sbis	0x15, 0	; 21
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <delay_us+0x14>
}
 2d2:	08 95       	ret

000002d4 <delay_ms>:

void delay_ms(uint16_t x)
{
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
 2da:	0d c0       	rjmp	.+26     	; 0x2f6 <delay_ms+0x22>
	for ( ; x > 0 ; x--)
	{
		delay_us(250);
 2dc:	8a ef       	ldi	r24, 0xFA	; 250
 2de:	0e 94 5d 01 	call	0x2ba	; 0x2ba <delay_us>
		delay_us(250);
 2e2:	8a ef       	ldi	r24, 0xFA	; 250
 2e4:	0e 94 5d 01 	call	0x2ba	; 0x2ba <delay_us>
		delay_us(250);
 2e8:	8a ef       	ldi	r24, 0xFA	; 250
 2ea:	0e 94 5d 01 	call	0x2ba	; 0x2ba <delay_us>
		delay_us(250);
 2ee:	8a ef       	ldi	r24, 0xFA	; 250
 2f0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <delay_us>
	while( (TIFR0 & (1<<TOV0)) == 0);
}

void delay_ms(uint16_t x)
{
	for ( ; x > 0 ; x--)
 2f4:	21 97       	sbiw	r28, 0x01	; 1
 2f6:	20 97       	sbiw	r28, 0x00	; 0
 2f8:	89 f7       	brne	.-30     	; 0x2dc <delay_ms+0x8>
		delay_us(250);
		delay_us(250);
		delay_us(250);
		delay_us(250);
	}
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <write_to_EEPROM>:

void write_to_EEPROM(unsigned int Address, unsigned char Data)
{
    //Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE)); //Wait for last Write to complete
 300:	f9 99       	sbic	0x1f, 1	; 31
 302:	fe cf       	rjmp	.-4      	; 0x300 <write_to_EEPROM>
	//May need to wait for Flash to complete also!
	EEAR = Address;			//Assign the Address Register with "Address"
 304:	92 bd       	out	0x22, r25	; 34
 306:	81 bd       	out	0x21, r24	; 33
	EEDR=Data;				//Put "Data" in the Data Register
 308:	60 bd       	out	0x20, r22	; 32
	EECR |= (1<<EEMPE); 	//Write to Master Write Enable
 30a:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= (1<<EEPE);  	//Start Write by setting EE Write Enable
 30c:	f9 9a       	sbi	0x1f, 1	; 31
	
}
 30e:	08 95       	ret

00000310 <__vector_17>:
Purpose:	Initialize I/O, Setup SPI Hardware
Parameters:	None
Return:		None
*/
ISR (SIG_SPI) 
{
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	3f 93       	push	r19
 31e:	4f 93       	push	r20
 320:	5f 93       	push	r21
 322:	6f 93       	push	r22
 324:	7f 93       	push	r23
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
 32a:	af 93       	push	r26
 32c:	bf 93       	push	r27
 32e:	ef 93       	push	r30
 330:	ff 93       	push	r31
	cli();	//Halt Interrupts
 332:	f8 94       	cli
	value=SPDR;	//Get the data from the SPI bus and put it into the temporary frame buffer
 334:	8e b5       	in	r24, 0x2e	; 46
 336:	80 93 46 01 	sts	0x0146, r24
	//If we didn't receive a special character add the value to the display buffer
	if(!command_mode && value != '%' && value != 0x26)
 33a:	80 91 45 01 	lds	r24, 0x0145
 33e:	88 23       	and	r24, r24
 340:	d1 f4       	brne	.+52     	; 0x376 <__vector_17+0x66>
 342:	80 91 46 01 	lds	r24, 0x0146
 346:	85 32       	cpi	r24, 0x25	; 37
 348:	b1 f0       	breq	.+44     	; 0x376 <__vector_17+0x66>
 34a:	80 91 46 01 	lds	r24, 0x0146
 34e:	86 32       	cpi	r24, 0x26	; 38
 350:	91 f0       	breq	.+36     	; 0x376 <__vector_17+0x66>
	{
		myBuffer[frame_index++] = value;	//Add value to buffer and increment the index.
 352:	80 91 40 01 	lds	r24, 0x0140
 356:	90 91 41 01 	lds	r25, 0x0141
 35a:	20 91 46 01 	lds	r18, 0x0146
 35e:	fc 01       	movw	r30, r24
 360:	e9 5b       	subi	r30, 0xB9	; 185
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	20 83       	st	Z, r18
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	90 93 41 01 	sts	0x0141, r25
 36c:	80 93 40 01 	sts	0x0140, r24
		SPDR = value;	//Send the value to the next board in the system.
 370:	80 91 46 01 	lds	r24, 0x0146
 374:	8e bd       	out	0x2e, r24	; 46
	}
	//If the board is in command mode we need to set the NUM_BOARDS parameter
	if(command_mode){
 376:	80 91 45 01 	lds	r24, 0x0145
 37a:	88 23       	and	r24, r24
 37c:	c1 f0       	breq	.+48     	; 0x3ae <__vector_17+0x9e>
		if(value > 0 && value < 9){	//Make sure we get a number between 0 and 8
 37e:	80 91 46 01 	lds	r24, 0x0146
 382:	88 23       	and	r24, r24
 384:	91 f0       	breq	.+36     	; 0x3aa <__vector_17+0x9a>
 386:	80 91 46 01 	lds	r24, 0x0146
 38a:	89 30       	cpi	r24, 0x09	; 9
 38c:	70 f4       	brcc	.+28     	; 0x3aa <__vector_17+0x9a>
			NUM_BOARDS=value;	//Set the NUM_BOARDS parameter for this matrix.	
 38e:	80 91 46 01 	lds	r24, 0x0146
 392:	80 93 43 01 	sts	0x0143, r24
			SPDR = (value-1);	//Send the NUM_BOARDS parameter to the next board in the system
 396:	80 91 46 01 	lds	r24, 0x0146
 39a:	81 50       	subi	r24, 0x01	; 1
 39c:	8e bd       	out	0x2e, r24	; 46
			write_to_EEPROM(NUM_BOARDS_ADDRESS, NUM_BOARDS);	//Save the NUM_BOARDS to EEPROM
 39e:	60 91 43 01 	lds	r22, 0x0143
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 80 01 	call	0x300	; 0x300 <write_to_EEPROM>
		}
		command_mode=0;	//Reset the command_mode flag
 3aa:	10 92 45 01 	sts	0x0145, r1
	}
	//If we get the '%' character we should enter command mode.
	if(value == '%'){
 3ae:	90 91 46 01 	lds	r25, 0x0146
 3b2:	95 32       	cpi	r25, 0x25	; 37
 3b4:	21 f4       	brne	.+8      	; 0x3be <__vector_17+0xae>
		command_mode=1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 45 01 	sts	0x0145, r24
		SPDR = '%';	//Send command mode to the next board too.
 3bc:	9e bd       	out	0x2e, r25	; 46
	}
	//0x26 is a special character to reset the frame index.
	if(value == 0x26){
 3be:	80 91 46 01 	lds	r24, 0x0146
 3c2:	86 32       	cpi	r24, 0x26	; 38
 3c4:	29 f4       	brne	.+10     	; 0x3d0 <__vector_17+0xc0>
		frame_index=0;
 3c6:	10 92 41 01 	sts	0x0141, r1
 3ca:	10 92 40 01 	sts	0x0140, r1
		SPDR = 0x26;
 3ce:	8e bd       	out	0x2e, r24	; 46
	}
	sei();	//Re-enable interrupts
 3d0:	78 94       	sei
}
 3d2:	ff 91       	pop	r31
 3d4:	ef 91       	pop	r30
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	0f 90       	pop	r0
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	0f 90       	pop	r0
 3f0:	1f 90       	pop	r1
 3f2:	18 95       	reti

000003f4 <ioinit>:

/*********************************************************
						Functions
*********************************************************/
void ioinit (void)
{
 3f4:	1f 93       	push	r17
	//1 = Output, 0 = Input
	DDRB = (1<<MISO);	//Set MISO as an output, all other SPI as inputs
 3f6:	80 e1       	ldi	r24, 0x10	; 16
 3f8:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<MOSI)|(1<<CS)|(1<<SCK);	//Enable pull-ups on SPI Lines
 3fa:	8c e2       	ldi	r24, 0x2C	; 44
 3fc:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0x1F;	//Set outputs to the shift registers
 3fe:	8f e1       	ldi	r24, 0x1F	; 31
 400:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xFF;	//All Port D pins are outputs to the Sync Driver
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	8a b9       	out	0x0a, r24	; 10

	//Set initial pin states
	sbi(PORTC, CLK);
 406:	40 9a       	sbi	0x08, 0	; 8
	sbi(PORTC, CLR);
 408:	43 9a       	sbi	0x08, 3	; 8
	sbi(PORTC, DATA);
 40a:	41 9a       	sbi	0x08, 1	; 8
	sbi(PORTC, LATCH);
 40c:	42 9a       	sbi	0x08, 2	; 8
	sbi(PORTC, EN); 
 40e:	44 9a       	sbi	0x08, 4	; 8
	
	//Setup the SPI Hardware
	SPCR = (1<<SPE) | (1<<SPIE)|(1<<SPR1)|(1<<SPR0); //Enable SPI, Enable SPI Interrupts
 410:	83 ec       	ldi	r24, 0xC3	; 195
 412:	8c bd       	out	0x2c, r24	; 44

unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
 414:	f9 99       	sbic	0x1f, 1	; 31
 416:	fe cf       	rjmp	.-4      	; 0x414 <ioinit+0x20>
	EEAR = Address;				//Assign the Address Register with "Address"
 418:	12 bc       	out	0x22, r1	; 34
 41a:	11 bc       	out	0x21, r1	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
 41c:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
 41e:	80 b5       	in	r24, 0x20	; 32
	
	//Setup the SPI Hardware
	SPCR = (1<<SPE) | (1<<SPIE)|(1<<SPR1)|(1<<SPR0); //Enable SPI, Enable SPI Interrupts
	
	//Load the NUM_BOARDS parameter from EEPROM
	RUN_COUNT = read_from_EEPROM(RUN_COUNT_ADDRESS);
 420:	80 93 44 01 	sts	0x0144, r24
	if(RUN_COUNT == 0xFF){
 424:	80 91 44 01 	lds	r24, 0x0144
 428:	8f 3f       	cpi	r24, 0xFF	; 255
 42a:	91 f4       	brne	.+36     	; 0x450 <ioinit+0x5c>
		RUN_COUNT = 1;
 42c:	11 e0       	ldi	r17, 0x01	; 1
 42e:	10 93 44 01 	sts	0x0144, r17
		write_to_EEPROM(RUN_COUNT_ADDRESS, RUN_COUNT);
 432:	60 91 44 01 	lds	r22, 0x0144
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 80 01 	call	0x300	; 0x300 <write_to_EEPROM>
		NUM_BOARDS=1;
 43e:	10 93 43 01 	sts	0x0143, r17
		write_to_EEPROM(NUM_BOARDS_ADDRESS, NUM_BOARDS);
 442:	60 91 43 01 	lds	r22, 0x0143
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 80 01 	call	0x300	; 0x300 <write_to_EEPROM>
 44e:	28 c0       	rjmp	.+80     	; 0x4a0 <ioinit+0xac>

unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
 450:	f9 99       	sbic	0x1f, 1	; 31
 452:	fe cf       	rjmp	.-4      	; 0x450 <ioinit+0x5c>
	EEAR = Address;				//Assign the Address Register with "Address"
 454:	12 bc       	out	0x22, r1	; 34
 456:	11 bc       	out	0x21, r1	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
 458:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
 45a:	80 b5       	in	r24, 0x20	; 32
		write_to_EEPROM(RUN_COUNT_ADDRESS, RUN_COUNT);
		NUM_BOARDS=1;
		write_to_EEPROM(NUM_BOARDS_ADDRESS, NUM_BOARDS);
	}
	else{
		RUN_COUNT = read_from_EEPROM(RUN_COUNT_ADDRESS);
 45c:	80 93 44 01 	sts	0x0144, r24
		if(RUN_COUNT < 10){
 460:	80 91 44 01 	lds	r24, 0x0144
 464:	8a 30       	cpi	r24, 0x0A	; 10
 466:	58 f4       	brcc	.+22     	; 0x47e <ioinit+0x8a>
			RUN_COUNT+=1;
 468:	80 91 44 01 	lds	r24, 0x0144
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	80 93 44 01 	sts	0x0144, r24
			write_to_EEPROM(RUN_COUNT_ADDRESS, RUN_COUNT);
 472:	60 91 44 01 	lds	r22, 0x0144
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 80 01 	call	0x300	; 0x300 <write_to_EEPROM>

unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
 47e:	f9 99       	sbic	0x1f, 1	; 31
 480:	fe cf       	rjmp	.-4      	; 0x47e <ioinit+0x8a>
	EEAR = Address;				//Assign the Address Register with "Address"
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	92 bd       	out	0x22, r25	; 34
 488:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
 48a:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
 48c:	80 b5       	in	r24, 0x20	; 32
		RUN_COUNT = read_from_EEPROM(RUN_COUNT_ADDRESS);
		if(RUN_COUNT < 10){
			RUN_COUNT+=1;
			write_to_EEPROM(RUN_COUNT_ADDRESS, RUN_COUNT);
		}
		NUM_BOARDS=read_from_EEPROM(NUM_BOARDS_ADDRESS);
 48e:	80 93 43 01 	sts	0x0143, r24
		if(NUM_BOARDS > 8)NUM_BOARDS=1;
 492:	80 91 43 01 	lds	r24, 0x0143
 496:	89 30       	cpi	r24, 0x09	; 9
 498:	18 f0       	brcs	.+6      	; 0x4a0 <ioinit+0xac>
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 43 01 	sts	0x0143, r24
	}
		
}
 4a0:	1f 91       	pop	r17
 4a2:	08 95       	ret

000004a4 <read_from_EEPROM>:

unsigned char read_from_EEPROM(unsigned int Address)
{
	//Interrupts are globally disabled!
	
	while(EECR & (1<<EEPE));	//Wait for last Write to complete
 4a4:	f9 99       	sbic	0x1f, 1	; 31
 4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <read_from_EEPROM>
	EEAR = Address;				//Assign the Address Register with "Address"
 4a8:	92 bd       	out	0x22, r25	; 34
 4aa:	81 bd       	out	0x21, r24	; 33
	EECR |= (1<<EERE); 			//Start Read by writing to EER
 4ac:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;				//EEPROM Data is returned
 4ae:	80 b5       	in	r24, 0x20	; 32
}
 4b0:	08 95       	ret

000004b2 <fillBoardCount>:

void fillBoardCount(char number)
{
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	81 50       	subi	r24, 0x01	; 1
 4ba:	e8 2f       	mov	r30, r24
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	73 e0       	ldi	r23, 0x03	; 3
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	7a 95       	dec	r23
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <fillBoardCount+0xe>
 4c8:	e9 5f       	subi	r30, 0xF9	; 249
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	70 e0       	ldi	r23, 0x00	; 0
	number-=1;
	for(int column=7; column>=0; column--)
    {
        for(int row=0; row<8; row++)
        {
            if(numbers[number*8+column] & (1<<row))myBuffer[row*8+(7-column)]=0xE0;
 4d0:	10 ee       	ldi	r17, 0xE0	; 224
 4d2:	1c c0       	rjmp	.+56     	; 0x50c <__stack+0xd>
 4d4:	ce 01       	movw	r24, r28
 4d6:	02 2e       	mov	r0, r18
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <fillBoardCount+0x2c>
 4da:	95 95       	asr	r25
 4dc:	87 95       	ror	r24
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <fillBoardCount+0x28>
 4e2:	da 01       	movw	r26, r20
 4e4:	a9 5b       	subi	r26, 0xB9	; 185
 4e6:	be 4f       	sbci	r27, 0xFE	; 254
 4e8:	80 ff       	sbrs	r24, 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <fillBoardCount+0x3e>
 4ec:	1c 93       	st	X, r17
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <fillBoardCount+0x40>
            else myBuffer[row*8+(7-column)]=0x00;
 4f0:	1c 92       	st	X, r1
void fillBoardCount(char number)
{
	number-=1;
	for(int column=7; column>=0; column--)
    {
        for(int row=0; row<8; row++)
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	48 5f       	subi	r20, 0xF8	; 248
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	28 30       	cpi	r18, 0x08	; 8
 4fc:	31 05       	cpc	r19, r1
 4fe:	51 f7       	brne	.-44     	; 0x4d4 <fillBoardCount+0x22>
 500:	6f 5f       	subi	r22, 0xFF	; 255
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	31 97       	sbiw	r30, 0x01	; 1
}

void fillBoardCount(char number)
{
	number-=1;
	for(int column=7; column>=0; column--)
 506:	68 30       	cpi	r22, 0x08	; 8
 508:	71 05       	cpc	r23, r1
 50a:	39 f0       	breq	.+14     	; 0x51a <__stack+0x1b>
    {
        for(int row=0; row<8; row++)
        {
            if(numbers[number*8+column] & (1<<row))myBuffer[row*8+(7-column)]=0xE0;
 50c:	80 81       	ld	r24, Z
 50e:	c8 2f       	mov	r28, r24
 510:	d0 e0       	ldi	r29, 0x00	; 0
 512:	ab 01       	movw	r20, r22
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	dd cf       	rjmp	.-70     	; 0x4d4 <fillBoardCount+0x22>
            else myBuffer[row*8+(7-column)]=0x00;
        }
    }
	parse_frame(myBuffer);
 51a:	87 e4       	ldi	r24, 0x47	; 71
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 53 00 	call	0xa6	; 0xa6 <parse_frame>

 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	1f 91       	pop	r17
 528:	08 95       	ret

0000052a <main>:

/*********************************************************
						Main Code
*********************************************************/
int main (void)
{
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
	ioinit ();	//Initialize the I/O and the SPI port
 530:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ioinit>
	
	//Make sure all the pixels are working
	if(RUN_COUNT < 2)splash_screen();
 534:	80 91 44 01 	lds	r24, 0x0144
 538:	82 30       	cpi	r24, 0x02	; 2
 53a:	10 f4       	brcc	.+4      	; 0x540 <main+0x16>
 53c:	0e 94 02 01 	call	0x204	; 0x204 <splash_screen>
	
	
	fillBoardCount(NUM_BOARDS);	//Put the board number into the display frame
 540:	80 91 43 01 	lds	r24, 0x0143
 544:	0e 94 59 02 	call	0x4b2	; 0x4b2 <fillBoardCount>
 548:	c0 e0       	ldi	r28, 0x00	; 0
 54a:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0; i<5000; i++)
	{
		post_frames();
 54c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <post_frames>
		timer_clicks = (timer_clicks + 1) & 0x07; //0b00000111; //Circular 0 to 7
 550:	80 91 42 01 	lds	r24, 0x0142
 554:	8f 5f       	subi	r24, 0xFF	; 255
 556:	87 70       	andi	r24, 0x07	; 7
 558:	80 93 42 01 	sts	0x0142, r24
	//Make sure all the pixels are working
	if(RUN_COUNT < 2)splash_screen();
	
	
	fillBoardCount(NUM_BOARDS);	//Put the board number into the display frame
	for(int i=0; i<5000; i++)
 55c:	21 96       	adiw	r28, 0x01	; 1
 55e:	83 e1       	ldi	r24, 0x13	; 19
 560:	c8 38       	cpi	r28, 0x88	; 136
 562:	d8 07       	cpc	r29, r24
 564:	99 f7       	brne	.-26     	; 0x54c <main+0x22>
	{
		post_frames();
		timer_clicks = (timer_clicks + 1) & 0x07; //0b00000111; //Circular 0 to 7
	}
	
	sei();	//Enable Global Interrupts
 566:	78 94       	sei
	while(1)
	{
        if (PINB & (1<<CS)) //If CS goes high, SPI com is complete
		{
			new_frame=1;
 568:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	sei();	//Enable Global Interrupts
	while(1)
	{
        if (PINB & (1<<CS)) //If CS goes high, SPI com is complete
 56a:	1a 9b       	sbis	0x03, 2	; 3
 56c:	02 c0       	rjmp	.+4      	; 0x572 <main+0x48>
		{
			new_frame=1;
 56e:	10 93 07 04 	sts	0x0407, r17
		}
		//New frame is set when enought bytes have been received for the whole system
		if(new_frame==1){
 572:	80 91 07 04 	lds	r24, 0x0407
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	71 f4       	brne	.+28     	; 0x596 <main+0x6c>
			new_frame=0;	//Reset the frame flag.
 57a:	10 92 07 04 	sts	0x0407, r1
			parse_frame(&myBuffer[(NUM_BOARDS-1)*64]);	//Parse the buffer at the location
 57e:	80 91 43 01 	lds	r24, 0x0143
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	e6 e0       	ldi	r30, 0x06	; 6
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	ea 95       	dec	r30
 58c:	e1 f7       	brne	.-8      	; 0x586 <main+0x5c>
 58e:	89 5f       	subi	r24, 0xF9	; 249
 590:	9e 4f       	sbci	r25, 0xFE	; 254
 592:	0e 94 53 00 	call	0xa6	; 0xa6 <parse_frame>
				//for this specific board.
		}

		post_frames();	//Put the colors onto the matrix.
 596:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <post_frames>
		//Increment clicks to determine LED brightness levels
		timer_clicks = (timer_clicks + 1) & 0x07; //0b00000111; //Circular 0 to 7
 59a:	80 91 42 01 	lds	r24, 0x0142
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	87 70       	andi	r24, 0x07	; 7
 5a2:	80 93 42 01 	sts	0x0142, r24
 5a6:	e1 cf       	rjmp	.-62     	; 0x56a <main+0x40>

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
